#!atproto

main :=
  io.writeToOut (/addr "Hello World!\010")

  io := { writeTo: writeTo, writeToErr: writeToErr, writeToOut: writeToOut }

    writeTo _file _str :=
      /case (/or (/cmp #eq n_written str_len) (/cmp #eq maybe_err 0))
            { #true: #ok n_written, #false: #err maybe_err }
      n_written := libc.fWrite _str 1 str_len _file
      maybe_err := libc.fError _file
      str_len := /len _str

    writeToOut _str := writeToStdOrExit libc.stdout _str
    writeToErr _str := writeToStdOrExit libc.stdout _str

    writeToStdOrExit _std_file _str :=
      /case (writeTo _std_file _str)
            { #ok n: n, #err _: libc.exit 1 }

libc := {
  File    : /T #extern #FILE,

  stdin   : /extern #stdin [] (/T #ptr File),
  stdout  : /extern #stdout [] (/T #ptr File),
  stderr  : /extern #stderr [] (/T #ptr File),

  exit    : /extern #exit [#noreturn] (/T #void) { #_status: (/T #int #c) },
  fError  : /extern #ferror [] (/T #int #c) { #_file: (/T #ptr File) },
  fRead   : /extern #fread [] (/T #int #word) { #_buf: (/T #ptr (/T #arr (/T #int 0 255))), #_size: (/T #int #word), #_count: (/T #int #word), #_file: (/T #ptr File) },
  fWrite  : /extern #fwrite [] (/T #int #word) { #_buf: (/T #ptr (/T #arr (/T #int 0 255))), #_size: (/T #int #word), #_count: (/T #int #word), #_file: (/T #ptr File) },
}
